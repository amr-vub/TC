Terminals unused in grammar

   WRITE
   READ
   IF
   ELSE
   RETURN
   WHILE


Grammar

    0 $accept: program $end

    1 program: declarations

    2 declarations: declaration declarations
    3             | /* empty */

    4 declaration: fun_declaration
    5            | var_declaration

    6 @1: /* empty */

    7 $@2: /* empty */

    8 fun_declaration: type NAME @1 LPAR formal_pars RPAR $@2 block

    9 formal_pars: more_parameters
   10            | /* empty */

   11 more_parameters: formal_par COMMA more_parameters
   12                | formal_par

   13 formal_par: type NAME

   14 $@3: /* empty */

   15 block: LBRACE $@3 var_declarations statements RBRACE

   16 var_declarations: var_declaration var_declarations
   17                 | /* empty */

   18 var_declaration: type NAME SEMICOLON

   19 type: INT
   20     | CHAR
   21     | type LBRACK exp RBRACK
   22     | type LBRACK exp RBRACK LBRACK exp RBRACK

   23 statements: statement SEMICOLON statements
   24           | /* empty */

   25 statement: lexp ASSIGN exp

   26 lexp: var

   27 exp: QCHAR
   28    | LENGTH lexp
   29    | exp PLUS exp
   30    | exp MINUS exp
   31    | exp TIMES exp
   32    | exp DIVIDE exp
   33    | LPAR exp RPAR
   34    | MINUS exp
   35    | exp EQUAL exp
   36    | exp NEQUAL exp
   37    | exp GREATER exp
   38    | exp LESS exp
   39    | NOT exp
   40    | var
   41    | NUMBER

   42 var: NAME


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 19
CHAR (259) 20
WRITE (260)
READ (261)
NAME (262) 8 13 18 42
IF (263)
ELSE (264)
RETURN (265)
NUMBER (266) 41
LPAR (267) 8 33
RPAR (268) 8 33
QCHAR (269) 27
LBRACE (270) 15
RBRACE (271) 15
LBRACK (272) 21 22
RBRACK (273) 21 22
ASSIGN (274) 25
SEMICOLON (275) 18 23
COMMA (276) 11
WHILE (277)
PLUS (278) 29
MINUS (279) 30 34
TIMES (280) 31
DIVIDE (281) 32
EQUAL (282) 35
NEQUAL (283) 36
NOT (284) 39
GREATER (285) 37
LESS (286) 38
LENGTH (287) 28
LOW (288)
UMINUS (289)


Nonterminals, with rules where they appear

$accept (35)
    on left: 0
program (36)
    on left: 1, on right: 0
declarations (37)
    on left: 2 3, on right: 1 2
declaration (38)
    on left: 4 5, on right: 2
fun_declaration (39)
    on left: 8, on right: 4
@1 (40)
    on left: 6, on right: 8
$@2 (41)
    on left: 7, on right: 8
formal_pars (42)
    on left: 9 10, on right: 8
more_parameters (43)
    on left: 11 12, on right: 9 11
formal_par (44)
    on left: 13, on right: 11 12
block (45)
    on left: 15, on right: 8
$@3 (46)
    on left: 14, on right: 15
var_declarations (47)
    on left: 16 17, on right: 15 16
var_declaration (48)
    on left: 18, on right: 5 16
type (49)
    on left: 19 20 21 22, on right: 8 13 18 21 22
statements (50)
    on left: 23 24, on right: 15 23
statement (51)
    on left: 25, on right: 23
lexp (52)
    on left: 26, on right: 25 28
exp (53)
    on left: 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41, on right:
    21 22 25 29 30 31 32 33 34 35 36 37 38 39
var (54)
    on left: 42, on right: 26 40


state 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    CHAR  shift, and go to state 2

    $default  reduce using rule 3 (declarations)

    program          go to state 3
    declarations     go to state 4
    declaration      go to state 5
    fun_declaration  go to state 6
    var_declaration  go to state 7
    type             go to state 8


state 1

   19 type: INT .

    $default  reduce using rule 19 (type)


state 2

   20 type: CHAR .

    $default  reduce using rule 20 (type)


state 3

    0 $accept: program . $end

    $end  shift, and go to state 9


state 4

    1 program: declarations .

    $default  reduce using rule 1 (program)


state 5

    2 declarations: declaration . declarations

    INT   shift, and go to state 1
    CHAR  shift, and go to state 2

    $default  reduce using rule 3 (declarations)

    declarations     go to state 10
    declaration      go to state 5
    fun_declaration  go to state 6
    var_declaration  go to state 7
    type             go to state 8


state 6

    4 declaration: fun_declaration .

    $default  reduce using rule 4 (declaration)


state 7

    5 declaration: var_declaration .

    $default  reduce using rule 5 (declaration)


state 8

    8 fun_declaration: type . NAME @1 LPAR formal_pars RPAR $@2 block
   18 var_declaration: type . NAME SEMICOLON
   21 type: type . LBRACK exp RBRACK
   22     | type . LBRACK exp RBRACK LBRACK exp RBRACK

    NAME    shift, and go to state 11
    LBRACK  shift, and go to state 12


state 9

    0 $accept: program $end .

    $default  accept


state 10

    2 declarations: declaration declarations .

    $default  reduce using rule 2 (declarations)


state 11

    8 fun_declaration: type NAME . @1 LPAR formal_pars RPAR $@2 block
   18 var_declaration: type NAME . SEMICOLON

    SEMICOLON  shift, and go to state 13

    $default  reduce using rule 6 (@1)

    @1  go to state 14


state 12

   21 type: type LBRACK . exp RBRACK
   22     | type LBRACK . exp RBRACK LBRACK exp RBRACK

    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    LPAR    shift, and go to state 17
    QCHAR   shift, and go to state 18
    MINUS   shift, and go to state 19
    NOT     shift, and go to state 20
    LENGTH  shift, and go to state 21

    exp  go to state 22
    var  go to state 23


state 13

   18 var_declaration: type NAME SEMICOLON .

    $default  reduce using rule 18 (var_declaration)


state 14

    8 fun_declaration: type NAME @1 . LPAR formal_pars RPAR $@2 block

    LPAR  shift, and go to state 24


state 15

   42 var: NAME .

    $default  reduce using rule 42 (var)


state 16

   41 exp: NUMBER .

    $default  reduce using rule 41 (exp)


state 17

   33 exp: LPAR . exp RPAR

    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    LPAR    shift, and go to state 17
    QCHAR   shift, and go to state 18
    MINUS   shift, and go to state 19
    NOT     shift, and go to state 20
    LENGTH  shift, and go to state 21

    exp  go to state 25
    var  go to state 23


state 18

   27 exp: QCHAR .

    $default  reduce using rule 27 (exp)


state 19

   34 exp: MINUS . exp

    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    LPAR    shift, and go to state 17
    QCHAR   shift, and go to state 18
    MINUS   shift, and go to state 19
    NOT     shift, and go to state 20
    LENGTH  shift, and go to state 21

    exp  go to state 26
    var  go to state 23


state 20

   39 exp: NOT . exp

    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    LPAR    shift, and go to state 17
    QCHAR   shift, and go to state 18
    MINUS   shift, and go to state 19
    NOT     shift, and go to state 20
    LENGTH  shift, and go to state 21

    exp  go to state 27
    var  go to state 23


state 21

   28 exp: LENGTH . lexp

    NAME  shift, and go to state 15

    lexp  go to state 28
    var   go to state 29


state 22

   21 type: type LBRACK exp . RBRACK
   22     | type LBRACK exp . RBRACK LBRACK exp RBRACK
   29 exp: exp . PLUS exp
   30    | exp . MINUS exp
   31    | exp . TIMES exp
   32    | exp . DIVIDE exp
   35    | exp . EQUAL exp
   36    | exp . NEQUAL exp
   37    | exp . GREATER exp
   38    | exp . LESS exp

    RBRACK   shift, and go to state 30
    PLUS     shift, and go to state 31
    MINUS    shift, and go to state 32
    TIMES    shift, and go to state 33
    DIVIDE   shift, and go to state 34
    EQUAL    shift, and go to state 35
    NEQUAL   shift, and go to state 36
    GREATER  shift, and go to state 37
    LESS     shift, and go to state 38


state 23

   40 exp: var .

    $default  reduce using rule 40 (exp)


state 24

    8 fun_declaration: type NAME @1 LPAR . formal_pars RPAR $@2 block

    INT   shift, and go to state 1
    CHAR  shift, and go to state 2

    $default  reduce using rule 10 (formal_pars)

    formal_pars      go to state 39
    more_parameters  go to state 40
    formal_par       go to state 41
    type             go to state 42


state 25

   29 exp: exp . PLUS exp
   30    | exp . MINUS exp
   31    | exp . TIMES exp
   32    | exp . DIVIDE exp
   33    | LPAR exp . RPAR
   35    | exp . EQUAL exp
   36    | exp . NEQUAL exp
   37    | exp . GREATER exp
   38    | exp . LESS exp

    RPAR     shift, and go to state 43
    PLUS     shift, and go to state 31
    MINUS    shift, and go to state 32
    TIMES    shift, and go to state 33
    DIVIDE   shift, and go to state 34
    EQUAL    shift, and go to state 35
    NEQUAL   shift, and go to state 36
    GREATER  shift, and go to state 37
    LESS     shift, and go to state 38


state 26

   29 exp: exp . PLUS exp
   30    | exp . MINUS exp
   31    | exp . TIMES exp
   32    | exp . DIVIDE exp
   34    | MINUS exp .
   35    | exp . EQUAL exp
   36    | exp . NEQUAL exp
   37    | exp . GREATER exp
   38    | exp . LESS exp

    $default  reduce using rule 34 (exp)


state 27

   29 exp: exp . PLUS exp
   30    | exp . MINUS exp
   31    | exp . TIMES exp
   32    | exp . DIVIDE exp
   35    | exp . EQUAL exp
   36    | exp . NEQUAL exp
   37    | exp . GREATER exp
   38    | exp . LESS exp
   39    | NOT exp .

    $default  reduce using rule 39 (exp)


state 28

   28 exp: LENGTH lexp .

    $default  reduce using rule 28 (exp)


state 29

   26 lexp: var .

    $default  reduce using rule 26 (lexp)


state 30

   21 type: type LBRACK exp RBRACK .
   22     | type LBRACK exp RBRACK . LBRACK exp RBRACK

    LBRACK  shift, and go to state 44

    $default  reduce using rule 21 (type)


state 31

   29 exp: exp PLUS . exp

    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    LPAR    shift, and go to state 17
    QCHAR   shift, and go to state 18
    MINUS   shift, and go to state 19
    NOT     shift, and go to state 20
    LENGTH  shift, and go to state 21

    exp  go to state 45
    var  go to state 23


state 32

   30 exp: exp MINUS . exp

    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    LPAR    shift, and go to state 17
    QCHAR   shift, and go to state 18
    MINUS   shift, and go to state 19
    NOT     shift, and go to state 20
    LENGTH  shift, and go to state 21

    exp  go to state 46
    var  go to state 23


state 33

   31 exp: exp TIMES . exp

    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    LPAR    shift, and go to state 17
    QCHAR   shift, and go to state 18
    MINUS   shift, and go to state 19
    NOT     shift, and go to state 20
    LENGTH  shift, and go to state 21

    exp  go to state 47
    var  go to state 23


state 34

   32 exp: exp DIVIDE . exp

    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    LPAR    shift, and go to state 17
    QCHAR   shift, and go to state 18
    MINUS   shift, and go to state 19
    NOT     shift, and go to state 20
    LENGTH  shift, and go to state 21

    exp  go to state 48
    var  go to state 23


state 35

   35 exp: exp EQUAL . exp

    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    LPAR    shift, and go to state 17
    QCHAR   shift, and go to state 18
    MINUS   shift, and go to state 19
    NOT     shift, and go to state 20
    LENGTH  shift, and go to state 21

    exp  go to state 49
    var  go to state 23


state 36

   36 exp: exp NEQUAL . exp

    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    LPAR    shift, and go to state 17
    QCHAR   shift, and go to state 18
    MINUS   shift, and go to state 19
    NOT     shift, and go to state 20
    LENGTH  shift, and go to state 21

    exp  go to state 50
    var  go to state 23


state 37

   37 exp: exp GREATER . exp

    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    LPAR    shift, and go to state 17
    QCHAR   shift, and go to state 18
    MINUS   shift, and go to state 19
    NOT     shift, and go to state 20
    LENGTH  shift, and go to state 21

    exp  go to state 51
    var  go to state 23


state 38

   38 exp: exp LESS . exp

    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    LPAR    shift, and go to state 17
    QCHAR   shift, and go to state 18
    MINUS   shift, and go to state 19
    NOT     shift, and go to state 20
    LENGTH  shift, and go to state 21

    exp  go to state 52
    var  go to state 23


state 39

    8 fun_declaration: type NAME @1 LPAR formal_pars . RPAR $@2 block

    RPAR  shift, and go to state 53


state 40

    9 formal_pars: more_parameters .

    $default  reduce using rule 9 (formal_pars)


state 41

   11 more_parameters: formal_par . COMMA more_parameters
   12                | formal_par .

    COMMA  shift, and go to state 54

    $default  reduce using rule 12 (more_parameters)


state 42

   13 formal_par: type . NAME
   21 type: type . LBRACK exp RBRACK
   22     | type . LBRACK exp RBRACK LBRACK exp RBRACK

    NAME    shift, and go to state 55
    LBRACK  shift, and go to state 12


state 43

   33 exp: LPAR exp RPAR .

    $default  reduce using rule 33 (exp)


state 44

   22 type: type LBRACK exp RBRACK LBRACK . exp RBRACK

    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    LPAR    shift, and go to state 17
    QCHAR   shift, and go to state 18
    MINUS   shift, and go to state 19
    NOT     shift, and go to state 20
    LENGTH  shift, and go to state 21

    exp  go to state 56
    var  go to state 23


state 45

   29 exp: exp . PLUS exp
   29    | exp PLUS exp .
   30    | exp . MINUS exp
   31    | exp . TIMES exp
   32    | exp . DIVIDE exp
   35    | exp . EQUAL exp
   36    | exp . NEQUAL exp
   37    | exp . GREATER exp
   38    | exp . LESS exp

    TIMES   shift, and go to state 33
    DIVIDE  shift, and go to state 34

    $default  reduce using rule 29 (exp)


state 46

   29 exp: exp . PLUS exp
   30    | exp . MINUS exp
   30    | exp MINUS exp .
   31    | exp . TIMES exp
   32    | exp . DIVIDE exp
   35    | exp . EQUAL exp
   36    | exp . NEQUAL exp
   37    | exp . GREATER exp
   38    | exp . LESS exp

    TIMES   shift, and go to state 33
    DIVIDE  shift, and go to state 34

    $default  reduce using rule 30 (exp)


state 47

   29 exp: exp . PLUS exp
   30    | exp . MINUS exp
   31    | exp . TIMES exp
   31    | exp TIMES exp .
   32    | exp . DIVIDE exp
   35    | exp . EQUAL exp
   36    | exp . NEQUAL exp
   37    | exp . GREATER exp
   38    | exp . LESS exp

    $default  reduce using rule 31 (exp)


state 48

   29 exp: exp . PLUS exp
   30    | exp . MINUS exp
   31    | exp . TIMES exp
   32    | exp . DIVIDE exp
   32    | exp DIVIDE exp .
   35    | exp . EQUAL exp
   36    | exp . NEQUAL exp
   37    | exp . GREATER exp
   38    | exp . LESS exp

    $default  reduce using rule 32 (exp)


state 49

   29 exp: exp . PLUS exp
   30    | exp . MINUS exp
   31    | exp . TIMES exp
   32    | exp . DIVIDE exp
   35    | exp . EQUAL exp
   35    | exp EQUAL exp .
   36    | exp . NEQUAL exp
   37    | exp . GREATER exp
   38    | exp . LESS exp

    PLUS    shift, and go to state 31
    MINUS   shift, and go to state 32
    TIMES   shift, and go to state 33
    DIVIDE  shift, and go to state 34

    EQUAL    error (nonassociative)
    NEQUAL   error (nonassociative)
    GREATER  error (nonassociative)
    LESS     error (nonassociative)

    $default  reduce using rule 35 (exp)


state 50

   29 exp: exp . PLUS exp
   30    | exp . MINUS exp
   31    | exp . TIMES exp
   32    | exp . DIVIDE exp
   35    | exp . EQUAL exp
   36    | exp . NEQUAL exp
   36    | exp NEQUAL exp .
   37    | exp . GREATER exp
   38    | exp . LESS exp

    PLUS    shift, and go to state 31
    MINUS   shift, and go to state 32
    TIMES   shift, and go to state 33
    DIVIDE  shift, and go to state 34

    EQUAL    error (nonassociative)
    NEQUAL   error (nonassociative)
    GREATER  error (nonassociative)
    LESS     error (nonassociative)

    $default  reduce using rule 36 (exp)


state 51

   29 exp: exp . PLUS exp
   30    | exp . MINUS exp
   31    | exp . TIMES exp
   32    | exp . DIVIDE exp
   35    | exp . EQUAL exp
   36    | exp . NEQUAL exp
   37    | exp . GREATER exp
   37    | exp GREATER exp .
   38    | exp . LESS exp

    PLUS    shift, and go to state 31
    MINUS   shift, and go to state 32
    TIMES   shift, and go to state 33
    DIVIDE  shift, and go to state 34

    EQUAL    error (nonassociative)
    NEQUAL   error (nonassociative)
    GREATER  error (nonassociative)
    LESS     error (nonassociative)

    $default  reduce using rule 37 (exp)


state 52

   29 exp: exp . PLUS exp
   30    | exp . MINUS exp
   31    | exp . TIMES exp
   32    | exp . DIVIDE exp
   35    | exp . EQUAL exp
   36    | exp . NEQUAL exp
   37    | exp . GREATER exp
   38    | exp . LESS exp
   38    | exp LESS exp .

    PLUS    shift, and go to state 31
    MINUS   shift, and go to state 32
    TIMES   shift, and go to state 33
    DIVIDE  shift, and go to state 34

    EQUAL    error (nonassociative)
    NEQUAL   error (nonassociative)
    GREATER  error (nonassociative)
    LESS     error (nonassociative)

    $default  reduce using rule 38 (exp)


state 53

    8 fun_declaration: type NAME @1 LPAR formal_pars RPAR . $@2 block

    $default  reduce using rule 7 ($@2)

    $@2  go to state 57


state 54

   11 more_parameters: formal_par COMMA . more_parameters

    INT   shift, and go to state 1
    CHAR  shift, and go to state 2

    more_parameters  go to state 58
    formal_par       go to state 41
    type             go to state 42


state 55

   13 formal_par: type NAME .

    $default  reduce using rule 13 (formal_par)


state 56

   22 type: type LBRACK exp RBRACK LBRACK exp . RBRACK
   29 exp: exp . PLUS exp
   30    | exp . MINUS exp
   31    | exp . TIMES exp
   32    | exp . DIVIDE exp
   35    | exp . EQUAL exp
   36    | exp . NEQUAL exp
   37    | exp . GREATER exp
   38    | exp . LESS exp

    RBRACK   shift, and go to state 59
    PLUS     shift, and go to state 31
    MINUS    shift, and go to state 32
    TIMES    shift, and go to state 33
    DIVIDE   shift, and go to state 34
    EQUAL    shift, and go to state 35
    NEQUAL   shift, and go to state 36
    GREATER  shift, and go to state 37
    LESS     shift, and go to state 38


state 57

    8 fun_declaration: type NAME @1 LPAR formal_pars RPAR $@2 . block

    LBRACE  shift, and go to state 60

    block  go to state 61


state 58

   11 more_parameters: formal_par COMMA more_parameters .

    $default  reduce using rule 11 (more_parameters)


state 59

   22 type: type LBRACK exp RBRACK LBRACK exp RBRACK .

    $default  reduce using rule 22 (type)


state 60

   15 block: LBRACE . $@3 var_declarations statements RBRACE

    $default  reduce using rule 14 ($@3)

    $@3  go to state 62


state 61

    8 fun_declaration: type NAME @1 LPAR formal_pars RPAR $@2 block .

    $default  reduce using rule 8 (fun_declaration)


state 62

   15 block: LBRACE $@3 . var_declarations statements RBRACE

    INT   shift, and go to state 1
    CHAR  shift, and go to state 2

    $default  reduce using rule 17 (var_declarations)

    var_declarations  go to state 63
    var_declaration   go to state 64
    type              go to state 65


state 63

   15 block: LBRACE $@3 var_declarations . statements RBRACE

    NAME  shift, and go to state 15

    $default  reduce using rule 24 (statements)

    statements  go to state 66
    statement   go to state 67
    lexp        go to state 68
    var         go to state 29


state 64

   16 var_declarations: var_declaration . var_declarations

    INT   shift, and go to state 1
    CHAR  shift, and go to state 2

    $default  reduce using rule 17 (var_declarations)

    var_declarations  go to state 69
    var_declaration   go to state 64
    type              go to state 65


state 65

   18 var_declaration: type . NAME SEMICOLON
   21 type: type . LBRACK exp RBRACK
   22     | type . LBRACK exp RBRACK LBRACK exp RBRACK

    NAME    shift, and go to state 70
    LBRACK  shift, and go to state 12


state 66

   15 block: LBRACE $@3 var_declarations statements . RBRACE

    RBRACE  shift, and go to state 71


state 67

   23 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 72


state 68

   25 statement: lexp . ASSIGN exp

    ASSIGN  shift, and go to state 73


state 69

   16 var_declarations: var_declaration var_declarations .

    $default  reduce using rule 16 (var_declarations)


state 70

   18 var_declaration: type NAME . SEMICOLON

    SEMICOLON  shift, and go to state 13


state 71

   15 block: LBRACE $@3 var_declarations statements RBRACE .

    $default  reduce using rule 15 (block)


state 72

   23 statements: statement SEMICOLON . statements

    NAME  shift, and go to state 15

    $default  reduce using rule 24 (statements)

    statements  go to state 74
    statement   go to state 67
    lexp        go to state 68
    var         go to state 29


state 73

   25 statement: lexp ASSIGN . exp

    NAME    shift, and go to state 15
    NUMBER  shift, and go to state 16
    LPAR    shift, and go to state 17
    QCHAR   shift, and go to state 18
    MINUS   shift, and go to state 19
    NOT     shift, and go to state 20
    LENGTH  shift, and go to state 21

    exp  go to state 75
    var  go to state 23


state 74

   23 statements: statement SEMICOLON statements .

    $default  reduce using rule 23 (statements)


state 75

   25 statement: lexp ASSIGN exp .
   29 exp: exp . PLUS exp
   30    | exp . MINUS exp
   31    | exp . TIMES exp
   32    | exp . DIVIDE exp
   35    | exp . EQUAL exp
   36    | exp . NEQUAL exp
   37    | exp . GREATER exp
   38    | exp . LESS exp

    PLUS     shift, and go to state 31
    MINUS    shift, and go to state 32
    TIMES    shift, and go to state 33
    DIVIDE   shift, and go to state 34
    EQUAL    shift, and go to state 35
    NEQUAL   shift, and go to state 36
    GREATER  shift, and go to state 37
    LESS     shift, and go to state 38

    $default  reduce using rule 25 (statement)
