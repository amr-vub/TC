Grammar

    0 $accept: program $end

    1 program: declarations

    2 declarations: declaration declarations
    3             | /* empty */

    4 declaration: fun_declaration
    5            | var_declaration

    6 @1: /* empty */

    7 $@2: /* empty */

    8 fun_declaration: type NAME @1 LPAR formal_pars RPAR $@2 block

    9 formal_pars: more_parameters
   10            | /* empty */

   11 more_parameters: formal_par COMMA more_parameters
   12                | formal_par

   13 formal_par: type NAME

   14 $@3: /* empty */

   15 block: LBRACE $@3 var_declarations statements RBRACE

   16 var_declarations: var_declaration var_declarations
   17                 | /* empty */

   18 var_declaration: type NAME SEMICOLON

   19 type: INT
   20     | CHAR
   21     | type TIMES
   22     | type LBRACK exp RBRACK

   23 statements: statement SEMICOLON statements
   24           | /* empty */

   25 statement: IF LPAR exp RPAR statement
   26          | IF LPAR exp RPAR statement ELSE statement
   27          | WHILE LPAR exp RPAR statement
   28          | lexp ASSIGN exp
   29          | RETURN exp
   30          | NAME LPAR pars RPAR
   31          | block
   32          | WRITE exp
   33          | READ lexp

   34 lexp: var
   35     | lexp LBRACK exp RBRACK

   36 exp: QCHAR
   37    | LENGTH lexp
   38    | exp LBRACK exp RBRACK
   39    | exp PLUS exp
   40    | exp MINUS exp
   41    | exp TIMES exp
   42    | exp DIVIDE exp
   43    | exp EQUAL exp
   44    | exp NEQUAL exp
   45    | exp GREATER exp
   46    | exp LESS exp
   47    | LPAR exp RPAR
   48    | MINUS exp
   49    | NOT exp
   50    | var
   51    | NUMBER
   52    | NAME LPAR RPAR
   53    | NAME LPAR pars RPAR

   54 pars: exp
   55     | exp COMMA pars

   56 var: NAME


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 19
CHAR (259) 20
WRITE (260) 32
READ (261) 33
NAME (262) 8 13 18 30 52 53 56
IF (263) 25 26
ELSE (264) 26
RETURN (265) 29
NUMBER (266) 51
LPAR (267) 8 25 26 27 30 47 52 53
RPAR (268) 8 25 26 27 30 47 52 53
QCHAR (269) 36
LBRACE (270) 15
RBRACE (271) 15
LBRACK (272) 22 35 38
RBRACK (273) 22 35 38
ASSIGN (274) 28
SEMICOLON (275) 18 23
COMMA (276) 11 55
WHILE (277) 27
PLUS (278) 39
MINUS (279) 40 48
TIMES (280) 21 41
DIVIDE (281) 42
EQUAL (282) 43
NEQUAL (283) 44
NOT (284) 49
GREATER (285) 45
LESS (286) 46
LENGTH (287) 37
LOW (288)
UMINUS (289)


Nonterminals, with rules where they appear

$accept (35)
    on left: 0
program (36)
    on left: 1, on right: 0
declarations (37)
    on left: 2 3, on right: 1 2
declaration (38)
    on left: 4 5, on right: 2
fun_declaration (39)
    on left: 8, on right: 4
@1 (40)
    on left: 6, on right: 8
$@2 (41)
    on left: 7, on right: 8
formal_pars (42)
    on left: 9 10, on right: 8
more_parameters (43)
    on left: 11 12, on right: 9 11
formal_par (44)
    on left: 13, on right: 11 12
block (45)
    on left: 15, on right: 8 31
$@3 (46)
    on left: 14, on right: 15
var_declarations (47)
    on left: 16 17, on right: 15 16
var_declaration (48)
    on left: 18, on right: 5 16
type (49)
    on left: 19 20 21 22, on right: 8 13 18 21 22
statements (50)
    on left: 23 24, on right: 15 23
statement (51)
    on left: 25 26 27 28 29 30 31 32 33, on right: 23 25 26 27
lexp (52)
    on left: 34 35, on right: 28 33 35 37
exp (53)
    on left: 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53,
    on right: 22 25 26 27 28 29 32 35 38 39 40 41 42 43 44 45 46 47
    48 49 54 55
pars (54)
    on left: 54 55, on right: 30 53 55
var (55)
    on left: 56, on right: 34 50


state 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    CHAR  shift, and go to state 2

    $default  reduce using rule 3 (declarations)

    program          go to state 3
    declarations     go to state 4
    declaration      go to state 5
    fun_declaration  go to state 6
    var_declaration  go to state 7
    type             go to state 8


state 1

   19 type: INT .

    $default  reduce using rule 19 (type)


state 2

   20 type: CHAR .

    $default  reduce using rule 20 (type)


state 3

    0 $accept: program . $end

    $end  shift, and go to state 9


state 4

    1 program: declarations .

    $default  reduce using rule 1 (program)


state 5

    2 declarations: declaration . declarations

    INT   shift, and go to state 1
    CHAR  shift, and go to state 2

    $default  reduce using rule 3 (declarations)

    declarations     go to state 10
    declaration      go to state 5
    fun_declaration  go to state 6
    var_declaration  go to state 7
    type             go to state 8


state 6

    4 declaration: fun_declaration .

    $default  reduce using rule 4 (declaration)


state 7

    5 declaration: var_declaration .

    $default  reduce using rule 5 (declaration)


state 8

    8 fun_declaration: type . NAME @1 LPAR formal_pars RPAR $@2 block
   18 var_declaration: type . NAME SEMICOLON
   21 type: type . TIMES
   22     | type . LBRACK exp RBRACK

    NAME    shift, and go to state 11
    LBRACK  shift, and go to state 12
    TIMES   shift, and go to state 13


state 9

    0 $accept: program $end .

    $default  accept


state 10

    2 declarations: declaration declarations .

    $default  reduce using rule 2 (declarations)


state 11

    8 fun_declaration: type NAME . @1 LPAR formal_pars RPAR $@2 block
   18 var_declaration: type NAME . SEMICOLON

    SEMICOLON  shift, and go to state 14

    $default  reduce using rule 6 (@1)

    @1  go to state 15


state 12

   22 type: type LBRACK . exp RBRACK

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp  go to state 23
    var  go to state 24


state 13

   21 type: type TIMES .

    $default  reduce using rule 21 (type)


state 14

   18 var_declaration: type NAME SEMICOLON .

    $default  reduce using rule 18 (var_declaration)


state 15

    8 fun_declaration: type NAME @1 . LPAR formal_pars RPAR $@2 block

    LPAR  shift, and go to state 25


state 16

   52 exp: NAME . LPAR RPAR
   53    | NAME . LPAR pars RPAR
   56 var: NAME .

    LPAR  shift, and go to state 26

    $default  reduce using rule 56 (var)


state 17

   51 exp: NUMBER .

    $default  reduce using rule 51 (exp)


state 18

   47 exp: LPAR . exp RPAR

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp  go to state 27
    var  go to state 24


state 19

   36 exp: QCHAR .

    $default  reduce using rule 36 (exp)


state 20

   48 exp: MINUS . exp

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp  go to state 28
    var  go to state 24


state 21

   49 exp: NOT . exp

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp  go to state 29
    var  go to state 24


state 22

   37 exp: LENGTH . lexp

    NAME  shift, and go to state 30

    lexp  go to state 31
    var   go to state 32


state 23

   22 type: type LBRACK exp . RBRACK
   38 exp: exp . LBRACK exp RBRACK
   39    | exp . PLUS exp
   40    | exp . MINUS exp
   41    | exp . TIMES exp
   42    | exp . DIVIDE exp
   43    | exp . EQUAL exp
   44    | exp . NEQUAL exp
   45    | exp . GREATER exp
   46    | exp . LESS exp

    LBRACK   shift, and go to state 33
    RBRACK   shift, and go to state 34
    PLUS     shift, and go to state 35
    MINUS    shift, and go to state 36
    TIMES    shift, and go to state 37
    DIVIDE   shift, and go to state 38
    EQUAL    shift, and go to state 39
    NEQUAL   shift, and go to state 40
    GREATER  shift, and go to state 41
    LESS     shift, and go to state 42


state 24

   50 exp: var .

    $default  reduce using rule 50 (exp)


state 25

    8 fun_declaration: type NAME @1 LPAR . formal_pars RPAR $@2 block

    INT   shift, and go to state 1
    CHAR  shift, and go to state 2

    $default  reduce using rule 10 (formal_pars)

    formal_pars      go to state 43
    more_parameters  go to state 44
    formal_par       go to state 45
    type             go to state 46


state 26

   52 exp: NAME LPAR . RPAR
   53    | NAME LPAR . pars RPAR

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    RPAR    shift, and go to state 47
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp   go to state 48
    pars  go to state 49
    var   go to state 24


state 27

   38 exp: exp . LBRACK exp RBRACK
   39    | exp . PLUS exp
   40    | exp . MINUS exp
   41    | exp . TIMES exp
   42    | exp . DIVIDE exp
   43    | exp . EQUAL exp
   44    | exp . NEQUAL exp
   45    | exp . GREATER exp
   46    | exp . LESS exp
   47    | LPAR exp . RPAR

    RPAR     shift, and go to state 50
    LBRACK   shift, and go to state 33
    PLUS     shift, and go to state 35
    MINUS    shift, and go to state 36
    TIMES    shift, and go to state 37
    DIVIDE   shift, and go to state 38
    EQUAL    shift, and go to state 39
    NEQUAL   shift, and go to state 40
    GREATER  shift, and go to state 41
    LESS     shift, and go to state 42


state 28

   38 exp: exp . LBRACK exp RBRACK
   39    | exp . PLUS exp
   40    | exp . MINUS exp
   41    | exp . TIMES exp
   42    | exp . DIVIDE exp
   43    | exp . EQUAL exp
   44    | exp . NEQUAL exp
   45    | exp . GREATER exp
   46    | exp . LESS exp
   48    | MINUS exp .

    LBRACK  shift, and go to state 33

    $default  reduce using rule 48 (exp)


state 29

   38 exp: exp . LBRACK exp RBRACK
   39    | exp . PLUS exp
   40    | exp . MINUS exp
   41    | exp . TIMES exp
   42    | exp . DIVIDE exp
   43    | exp . EQUAL exp
   44    | exp . NEQUAL exp
   45    | exp . GREATER exp
   46    | exp . LESS exp
   49    | NOT exp .

    LBRACK  shift, and go to state 33

    $default  reduce using rule 49 (exp)


state 30

   56 var: NAME .

    $default  reduce using rule 56 (var)


state 31

   35 lexp: lexp . LBRACK exp RBRACK
   37 exp: LENGTH lexp .

    LBRACK  shift, and go to state 51

    $default  reduce using rule 37 (exp)


state 32

   34 lexp: var .

    $default  reduce using rule 34 (lexp)


state 33

   38 exp: exp LBRACK . exp RBRACK

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp  go to state 52
    var  go to state 24


state 34

   22 type: type LBRACK exp RBRACK .

    $default  reduce using rule 22 (type)


state 35

   39 exp: exp PLUS . exp

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp  go to state 53
    var  go to state 24


state 36

   40 exp: exp MINUS . exp

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp  go to state 54
    var  go to state 24


state 37

   41 exp: exp TIMES . exp

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp  go to state 55
    var  go to state 24


state 38

   42 exp: exp DIVIDE . exp

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp  go to state 56
    var  go to state 24


state 39

   43 exp: exp EQUAL . exp

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp  go to state 57
    var  go to state 24


state 40

   44 exp: exp NEQUAL . exp

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp  go to state 58
    var  go to state 24


state 41

   45 exp: exp GREATER . exp

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp  go to state 59
    var  go to state 24


state 42

   46 exp: exp LESS . exp

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp  go to state 60
    var  go to state 24


state 43

    8 fun_declaration: type NAME @1 LPAR formal_pars . RPAR $@2 block

    RPAR  shift, and go to state 61


state 44

    9 formal_pars: more_parameters .

    $default  reduce using rule 9 (formal_pars)


state 45

   11 more_parameters: formal_par . COMMA more_parameters
   12                | formal_par .

    COMMA  shift, and go to state 62

    $default  reduce using rule 12 (more_parameters)


state 46

   13 formal_par: type . NAME
   21 type: type . TIMES
   22     | type . LBRACK exp RBRACK

    NAME    shift, and go to state 63
    LBRACK  shift, and go to state 12
    TIMES   shift, and go to state 13


state 47

   52 exp: NAME LPAR RPAR .

    $default  reduce using rule 52 (exp)


state 48

   38 exp: exp . LBRACK exp RBRACK
   39    | exp . PLUS exp
   40    | exp . MINUS exp
   41    | exp . TIMES exp
   42    | exp . DIVIDE exp
   43    | exp . EQUAL exp
   44    | exp . NEQUAL exp
   45    | exp . GREATER exp
   46    | exp . LESS exp
   54 pars: exp .
   55     | exp . COMMA pars

    LBRACK   shift, and go to state 33
    COMMA    shift, and go to state 64
    PLUS     shift, and go to state 35
    MINUS    shift, and go to state 36
    TIMES    shift, and go to state 37
    DIVIDE   shift, and go to state 38
    EQUAL    shift, and go to state 39
    NEQUAL   shift, and go to state 40
    GREATER  shift, and go to state 41
    LESS     shift, and go to state 42

    $default  reduce using rule 54 (pars)


state 49

   53 exp: NAME LPAR pars . RPAR

    RPAR  shift, and go to state 65


state 50

   47 exp: LPAR exp RPAR .

    $default  reduce using rule 47 (exp)


state 51

   35 lexp: lexp LBRACK . exp RBRACK

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp  go to state 66
    var  go to state 24


state 52

   38 exp: exp . LBRACK exp RBRACK
   38    | exp LBRACK exp . RBRACK
   39    | exp . PLUS exp
   40    | exp . MINUS exp
   41    | exp . TIMES exp
   42    | exp . DIVIDE exp
   43    | exp . EQUAL exp
   44    | exp . NEQUAL exp
   45    | exp . GREATER exp
   46    | exp . LESS exp

    LBRACK   shift, and go to state 33
    RBRACK   shift, and go to state 67
    PLUS     shift, and go to state 35
    MINUS    shift, and go to state 36
    TIMES    shift, and go to state 37
    DIVIDE   shift, and go to state 38
    EQUAL    shift, and go to state 39
    NEQUAL   shift, and go to state 40
    GREATER  shift, and go to state 41
    LESS     shift, and go to state 42


state 53

   38 exp: exp . LBRACK exp RBRACK
   39    | exp . PLUS exp
   39    | exp PLUS exp .
   40    | exp . MINUS exp
   41    | exp . TIMES exp
   42    | exp . DIVIDE exp
   43    | exp . EQUAL exp
   44    | exp . NEQUAL exp
   45    | exp . GREATER exp
   46    | exp . LESS exp

    LBRACK  shift, and go to state 33
    TIMES   shift, and go to state 37
    DIVIDE  shift, and go to state 38

    $default  reduce using rule 39 (exp)


state 54

   38 exp: exp . LBRACK exp RBRACK
   39    | exp . PLUS exp
   40    | exp . MINUS exp
   40    | exp MINUS exp .
   41    | exp . TIMES exp
   42    | exp . DIVIDE exp
   43    | exp . EQUAL exp
   44    | exp . NEQUAL exp
   45    | exp . GREATER exp
   46    | exp . LESS exp

    LBRACK  shift, and go to state 33
    TIMES   shift, and go to state 37
    DIVIDE  shift, and go to state 38

    $default  reduce using rule 40 (exp)


state 55

   38 exp: exp . LBRACK exp RBRACK
   39    | exp . PLUS exp
   40    | exp . MINUS exp
   41    | exp . TIMES exp
   41    | exp TIMES exp .
   42    | exp . DIVIDE exp
   43    | exp . EQUAL exp
   44    | exp . NEQUAL exp
   45    | exp . GREATER exp
   46    | exp . LESS exp

    LBRACK  shift, and go to state 33

    $default  reduce using rule 41 (exp)


state 56

   38 exp: exp . LBRACK exp RBRACK
   39    | exp . PLUS exp
   40    | exp . MINUS exp
   41    | exp . TIMES exp
   42    | exp . DIVIDE exp
   42    | exp DIVIDE exp .
   43    | exp . EQUAL exp
   44    | exp . NEQUAL exp
   45    | exp . GREATER exp
   46    | exp . LESS exp

    LBRACK  shift, and go to state 33

    $default  reduce using rule 42 (exp)


state 57

   38 exp: exp . LBRACK exp RBRACK
   39    | exp . PLUS exp
   40    | exp . MINUS exp
   41    | exp . TIMES exp
   42    | exp . DIVIDE exp
   43    | exp . EQUAL exp
   43    | exp EQUAL exp .
   44    | exp . NEQUAL exp
   45    | exp . GREATER exp
   46    | exp . LESS exp

    LBRACK  shift, and go to state 33
    PLUS    shift, and go to state 35
    MINUS   shift, and go to state 36
    TIMES   shift, and go to state 37
    DIVIDE  shift, and go to state 38

    EQUAL    error (nonassociative)
    NEQUAL   error (nonassociative)
    GREATER  error (nonassociative)
    LESS     error (nonassociative)

    $default  reduce using rule 43 (exp)


state 58

   38 exp: exp . LBRACK exp RBRACK
   39    | exp . PLUS exp
   40    | exp . MINUS exp
   41    | exp . TIMES exp
   42    | exp . DIVIDE exp
   43    | exp . EQUAL exp
   44    | exp . NEQUAL exp
   44    | exp NEQUAL exp .
   45    | exp . GREATER exp
   46    | exp . LESS exp

    LBRACK  shift, and go to state 33
    PLUS    shift, and go to state 35
    MINUS   shift, and go to state 36
    TIMES   shift, and go to state 37
    DIVIDE  shift, and go to state 38

    EQUAL    error (nonassociative)
    NEQUAL   error (nonassociative)
    GREATER  error (nonassociative)
    LESS     error (nonassociative)

    $default  reduce using rule 44 (exp)


state 59

   38 exp: exp . LBRACK exp RBRACK
   39    | exp . PLUS exp
   40    | exp . MINUS exp
   41    | exp . TIMES exp
   42    | exp . DIVIDE exp
   43    | exp . EQUAL exp
   44    | exp . NEQUAL exp
   45    | exp . GREATER exp
   45    | exp GREATER exp .
   46    | exp . LESS exp

    LBRACK  shift, and go to state 33
    PLUS    shift, and go to state 35
    MINUS   shift, and go to state 36
    TIMES   shift, and go to state 37
    DIVIDE  shift, and go to state 38

    EQUAL    error (nonassociative)
    NEQUAL   error (nonassociative)
    GREATER  error (nonassociative)
    LESS     error (nonassociative)

    $default  reduce using rule 45 (exp)


state 60

   38 exp: exp . LBRACK exp RBRACK
   39    | exp . PLUS exp
   40    | exp . MINUS exp
   41    | exp . TIMES exp
   42    | exp . DIVIDE exp
   43    | exp . EQUAL exp
   44    | exp . NEQUAL exp
   45    | exp . GREATER exp
   46    | exp . LESS exp
   46    | exp LESS exp .

    LBRACK  shift, and go to state 33
    PLUS    shift, and go to state 35
    MINUS   shift, and go to state 36
    TIMES   shift, and go to state 37
    DIVIDE  shift, and go to state 38

    EQUAL    error (nonassociative)
    NEQUAL   error (nonassociative)
    GREATER  error (nonassociative)
    LESS     error (nonassociative)

    $default  reduce using rule 46 (exp)


state 61

    8 fun_declaration: type NAME @1 LPAR formal_pars RPAR . $@2 block

    $default  reduce using rule 7 ($@2)

    $@2  go to state 68


state 62

   11 more_parameters: formal_par COMMA . more_parameters

    INT   shift, and go to state 1
    CHAR  shift, and go to state 2

    more_parameters  go to state 69
    formal_par       go to state 45
    type             go to state 46


state 63

   13 formal_par: type NAME .

    $default  reduce using rule 13 (formal_par)


state 64

   55 pars: exp COMMA . pars

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp   go to state 48
    pars  go to state 70
    var   go to state 24


state 65

   53 exp: NAME LPAR pars RPAR .

    $default  reduce using rule 53 (exp)


state 66

   35 lexp: lexp LBRACK exp . RBRACK
   38 exp: exp . LBRACK exp RBRACK
   39    | exp . PLUS exp
   40    | exp . MINUS exp
   41    | exp . TIMES exp
   42    | exp . DIVIDE exp
   43    | exp . EQUAL exp
   44    | exp . NEQUAL exp
   45    | exp . GREATER exp
   46    | exp . LESS exp

    LBRACK   shift, and go to state 33
    RBRACK   shift, and go to state 71
    PLUS     shift, and go to state 35
    MINUS    shift, and go to state 36
    TIMES    shift, and go to state 37
    DIVIDE   shift, and go to state 38
    EQUAL    shift, and go to state 39
    NEQUAL   shift, and go to state 40
    GREATER  shift, and go to state 41
    LESS     shift, and go to state 42


state 67

   38 exp: exp LBRACK exp RBRACK .

    $default  reduce using rule 38 (exp)


state 68

    8 fun_declaration: type NAME @1 LPAR formal_pars RPAR $@2 . block

    LBRACE  shift, and go to state 72

    block  go to state 73


state 69

   11 more_parameters: formal_par COMMA more_parameters .

    $default  reduce using rule 11 (more_parameters)


state 70

   55 pars: exp COMMA pars .

    $default  reduce using rule 55 (pars)


state 71

   35 lexp: lexp LBRACK exp RBRACK .

    $default  reduce using rule 35 (lexp)


state 72

   15 block: LBRACE . $@3 var_declarations statements RBRACE

    $default  reduce using rule 14 ($@3)

    $@3  go to state 74


state 73

    8 fun_declaration: type NAME @1 LPAR formal_pars RPAR $@2 block .

    $default  reduce using rule 8 (fun_declaration)


state 74

   15 block: LBRACE $@3 . var_declarations statements RBRACE

    INT   shift, and go to state 1
    CHAR  shift, and go to state 2

    $default  reduce using rule 17 (var_declarations)

    var_declarations  go to state 75
    var_declaration   go to state 76
    type              go to state 77


state 75

   15 block: LBRACE $@3 var_declarations . statements RBRACE

    WRITE   shift, and go to state 78
    READ    shift, and go to state 79
    NAME    shift, and go to state 80
    IF      shift, and go to state 81
    RETURN  shift, and go to state 82
    LBRACE  shift, and go to state 72
    WHILE   shift, and go to state 83

    $default  reduce using rule 24 (statements)

    block       go to state 84
    statements  go to state 85
    statement   go to state 86
    lexp        go to state 87
    var         go to state 32


state 76

   16 var_declarations: var_declaration . var_declarations

    INT   shift, and go to state 1
    CHAR  shift, and go to state 2

    $default  reduce using rule 17 (var_declarations)

    var_declarations  go to state 88
    var_declaration   go to state 76
    type              go to state 77


state 77

   18 var_declaration: type . NAME SEMICOLON
   21 type: type . TIMES
   22     | type . LBRACK exp RBRACK

    NAME    shift, and go to state 89
    LBRACK  shift, and go to state 12
    TIMES   shift, and go to state 13


state 78

   32 statement: WRITE . exp

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp  go to state 90
    var  go to state 24


state 79

   33 statement: READ . lexp

    NAME  shift, and go to state 30

    lexp  go to state 91
    var   go to state 32


state 80

   30 statement: NAME . LPAR pars RPAR
   56 var: NAME .

    LPAR  shift, and go to state 92

    $default  reduce using rule 56 (var)


state 81

   25 statement: IF . LPAR exp RPAR statement
   26          | IF . LPAR exp RPAR statement ELSE statement

    LPAR  shift, and go to state 93


state 82

   29 statement: RETURN . exp

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp  go to state 94
    var  go to state 24


state 83

   27 statement: WHILE . LPAR exp RPAR statement

    LPAR  shift, and go to state 95


state 84

   31 statement: block .

    $default  reduce using rule 31 (statement)


state 85

   15 block: LBRACE $@3 var_declarations statements . RBRACE

    RBRACE  shift, and go to state 96


state 86

   23 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 97


state 87

   28 statement: lexp . ASSIGN exp
   35 lexp: lexp . LBRACK exp RBRACK

    LBRACK  shift, and go to state 51
    ASSIGN  shift, and go to state 98


state 88

   16 var_declarations: var_declaration var_declarations .

    $default  reduce using rule 16 (var_declarations)


state 89

   18 var_declaration: type NAME . SEMICOLON

    SEMICOLON  shift, and go to state 14


state 90

   32 statement: WRITE exp .
   38 exp: exp . LBRACK exp RBRACK
   39    | exp . PLUS exp
   40    | exp . MINUS exp
   41    | exp . TIMES exp
   42    | exp . DIVIDE exp
   43    | exp . EQUAL exp
   44    | exp . NEQUAL exp
   45    | exp . GREATER exp
   46    | exp . LESS exp

    LBRACK   shift, and go to state 33
    PLUS     shift, and go to state 35
    MINUS    shift, and go to state 36
    TIMES    shift, and go to state 37
    DIVIDE   shift, and go to state 38
    EQUAL    shift, and go to state 39
    NEQUAL   shift, and go to state 40
    GREATER  shift, and go to state 41
    LESS     shift, and go to state 42

    $default  reduce using rule 32 (statement)


state 91

   33 statement: READ lexp .
   35 lexp: lexp . LBRACK exp RBRACK

    LBRACK  shift, and go to state 51

    $default  reduce using rule 33 (statement)


state 92

   30 statement: NAME LPAR . pars RPAR

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp   go to state 48
    pars  go to state 99
    var   go to state 24


state 93

   25 statement: IF LPAR . exp RPAR statement
   26          | IF LPAR . exp RPAR statement ELSE statement

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp  go to state 100
    var  go to state 24


state 94

   29 statement: RETURN exp .
   38 exp: exp . LBRACK exp RBRACK
   39    | exp . PLUS exp
   40    | exp . MINUS exp
   41    | exp . TIMES exp
   42    | exp . DIVIDE exp
   43    | exp . EQUAL exp
   44    | exp . NEQUAL exp
   45    | exp . GREATER exp
   46    | exp . LESS exp

    LBRACK   shift, and go to state 33
    PLUS     shift, and go to state 35
    MINUS    shift, and go to state 36
    TIMES    shift, and go to state 37
    DIVIDE   shift, and go to state 38
    EQUAL    shift, and go to state 39
    NEQUAL   shift, and go to state 40
    GREATER  shift, and go to state 41
    LESS     shift, and go to state 42

    $default  reduce using rule 29 (statement)


state 95

   27 statement: WHILE LPAR . exp RPAR statement

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp  go to state 101
    var  go to state 24


state 96

   15 block: LBRACE $@3 var_declarations statements RBRACE .

    $default  reduce using rule 15 (block)


state 97

   23 statements: statement SEMICOLON . statements

    WRITE   shift, and go to state 78
    READ    shift, and go to state 79
    NAME    shift, and go to state 80
    IF      shift, and go to state 81
    RETURN  shift, and go to state 82
    LBRACE  shift, and go to state 72
    WHILE   shift, and go to state 83

    $default  reduce using rule 24 (statements)

    block       go to state 84
    statements  go to state 102
    statement   go to state 86
    lexp        go to state 87
    var         go to state 32


state 98

   28 statement: lexp ASSIGN . exp

    NAME    shift, and go to state 16
    NUMBER  shift, and go to state 17
    LPAR    shift, and go to state 18
    QCHAR   shift, and go to state 19
    MINUS   shift, and go to state 20
    NOT     shift, and go to state 21
    LENGTH  shift, and go to state 22

    exp  go to state 103
    var  go to state 24


state 99

   30 statement: NAME LPAR pars . RPAR

    RPAR  shift, and go to state 104


state 100

   25 statement: IF LPAR exp . RPAR statement
   26          | IF LPAR exp . RPAR statement ELSE statement
   38 exp: exp . LBRACK exp RBRACK
   39    | exp . PLUS exp
   40    | exp . MINUS exp
   41    | exp . TIMES exp
   42    | exp . DIVIDE exp
   43    | exp . EQUAL exp
   44    | exp . NEQUAL exp
   45    | exp . GREATER exp
   46    | exp . LESS exp

    RPAR     shift, and go to state 105
    LBRACK   shift, and go to state 33
    PLUS     shift, and go to state 35
    MINUS    shift, and go to state 36
    TIMES    shift, and go to state 37
    DIVIDE   shift, and go to state 38
    EQUAL    shift, and go to state 39
    NEQUAL   shift, and go to state 40
    GREATER  shift, and go to state 41
    LESS     shift, and go to state 42


state 101

   27 statement: WHILE LPAR exp . RPAR statement
   38 exp: exp . LBRACK exp RBRACK
   39    | exp . PLUS exp
   40    | exp . MINUS exp
   41    | exp . TIMES exp
   42    | exp . DIVIDE exp
   43    | exp . EQUAL exp
   44    | exp . NEQUAL exp
   45    | exp . GREATER exp
   46    | exp . LESS exp

    RPAR     shift, and go to state 106
    LBRACK   shift, and go to state 33
    PLUS     shift, and go to state 35
    MINUS    shift, and go to state 36
    TIMES    shift, and go to state 37
    DIVIDE   shift, and go to state 38
    EQUAL    shift, and go to state 39
    NEQUAL   shift, and go to state 40
    GREATER  shift, and go to state 41
    LESS     shift, and go to state 42


state 102

   23 statements: statement SEMICOLON statements .

    $default  reduce using rule 23 (statements)


state 103

   28 statement: lexp ASSIGN exp .
   38 exp: exp . LBRACK exp RBRACK
   39    | exp . PLUS exp
   40    | exp . MINUS exp
   41    | exp . TIMES exp
   42    | exp . DIVIDE exp
   43    | exp . EQUAL exp
   44    | exp . NEQUAL exp
   45    | exp . GREATER exp
   46    | exp . LESS exp

    LBRACK   shift, and go to state 33
    PLUS     shift, and go to state 35
    MINUS    shift, and go to state 36
    TIMES    shift, and go to state 37
    DIVIDE   shift, and go to state 38
    EQUAL    shift, and go to state 39
    NEQUAL   shift, and go to state 40
    GREATER  shift, and go to state 41
    LESS     shift, and go to state 42

    $default  reduce using rule 28 (statement)


state 104

   30 statement: NAME LPAR pars RPAR .

    $default  reduce using rule 30 (statement)


state 105

   25 statement: IF LPAR exp RPAR . statement
   26          | IF LPAR exp RPAR . statement ELSE statement

    WRITE   shift, and go to state 78
    READ    shift, and go to state 79
    NAME    shift, and go to state 80
    IF      shift, and go to state 81
    RETURN  shift, and go to state 82
    LBRACE  shift, and go to state 72
    WHILE   shift, and go to state 83

    block      go to state 84
    statement  go to state 107
    lexp       go to state 87
    var        go to state 32


state 106

   27 statement: WHILE LPAR exp RPAR . statement

    WRITE   shift, and go to state 78
    READ    shift, and go to state 79
    NAME    shift, and go to state 80
    IF      shift, and go to state 81
    RETURN  shift, and go to state 82
    LBRACE  shift, and go to state 72
    WHILE   shift, and go to state 83

    block      go to state 84
    statement  go to state 108
    lexp       go to state 87
    var        go to state 32


state 107

   25 statement: IF LPAR exp RPAR statement .
   26          | IF LPAR exp RPAR statement . ELSE statement

    ELSE  shift, and go to state 109

    $default  reduce using rule 25 (statement)


state 108

   27 statement: WHILE LPAR exp RPAR statement .

    $default  reduce using rule 27 (statement)


state 109

   26 statement: IF LPAR exp RPAR statement ELSE . statement

    WRITE   shift, and go to state 78
    READ    shift, and go to state 79
    NAME    shift, and go to state 80
    IF      shift, and go to state 81
    RETURN  shift, and go to state 82
    LBRACE  shift, and go to state 72
    WHILE   shift, and go to state 83

    block      go to state 84
    statement  go to state 110
    lexp       go to state 87
    var        go to state 32


state 110

   26 statement: IF LPAR exp RPAR statement ELSE statement .

    $default  reduce using rule 26 (statement)
